import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';
import { ethers } from 'ethers';
import { useAuth } from './AuthContext';

// Adresses des tokens BSC
const TOKEN_ADDRESSES = {
  USDT: "0x55d398326f99059fF775485246999027B3197955", // USDT BSC
  USDC: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d"  // USDC BSC
};

// ABI ERC20 minimal
const ERC20_ABI = [
  "function balanceOf(address account) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)"
];

const BSC_CHAIN_ID = 56;

interface WalletContextType {
  address: string | null;
  balance: {
    usdt: number;
    usdc: number;
  };
  connectWallet: () => Promise<void>;
  disconnectWallet: () => void;
  isConnecting: boolean;
  isConnected: boolean;
  chainId: number | null;
  switchNetwork: (chainId: number) => Promise<void>;
  refreshBalances: () => Promise<void>;
  checkWalletConnection: () => Promise<void>;
  requestAccountPermissions: () => Promise<void>;  // Nouvelle fonction
  changeAccount: () => Promise<void>;               // Nouvelle fonction
}

const WalletContext = createContext<WalletContextType | undefined>(undefined);

// D√©tection am√©lior√©e de MetaMask pour mobile
const detectMetaMask = (): boolean => {
  // V√©rification standard
  if (typeof window !== 'undefined' && window.ethereum?.isMetaMask) {
    return true;
  }

  // V√©rifications sp√©cifiques mobile
  if (typeof window !== 'undefined') {
    // V√©rifier si on est dans l'app MetaMask
    const userAgent = navigator.userAgent || navigator.vendor;
    const isMetaMaskApp = /MetaMask/i.test(userAgent);
    
    // V√©rifier diff√©rentes propri√©t√©s ethereum
    const hasEthereum = !!(
      window.ethereum || 
      (window as any).web3?.currentProvider?.isMetaMask ||
      (window as any).web3?.currentProvider?.selectedAddress
    );
    
    console.log('üîç D√©tection MetaMask Mobile:', {
      windowEthereum: !!window.ethereum,
      isMetaMask: window.ethereum?.isMetaMask,
      userAgent: userAgent.substring(0, 100),
      isMetaMaskApp,
      hasEthereum
    });
    
    return isMetaMaskApp || hasEthereum;
  }
  
  return false;
};

const waitForMetaMask = (timeout = 3000): Promise<boolean> => {
  return new Promise((resolve) => {
    if (detectMetaMask()) {
      resolve(true);
      return;
    }

    let attempts = 0;
    const maxAttempts = timeout / 100;
    
    const checkInterval = setInterval(() => {
      attempts++;
      
      if (detectMetaMask()) {
        clearInterval(checkInterval);
        resolve(true);
      } else if (attempts >= maxAttempts) {
        clearInterval(checkInterval);
        resolve(false);
      }
    }, 100);
  });
};

// Fonction pour ouvrir MetaMask sur mobile si pas d√©tect√©
const openMetaMaskMobile = () => {
  const currentUrl = window.location.href;
  const metamaskDeepLink = `https://metamask.app.link/dapp/${window.location.host}${window.location.pathname}`;
  
  console.log('üöÄ Ouverture MetaMask Mobile:', metamaskDeepLink);
  
  // Tenter d'ouvrir l'app MetaMask
  window.open(metamaskDeepLink, '_blank');
};

// D√©tection du type d'appareil
const isMobileDevice = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};

export const WalletProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [address, setAddress] = useState<string | null>(null);
  const [balance, setBalance] = useState({ usdt: 0, usdc: 0 });
  const [isConnecting, setIsConnecting] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [chainId, setChainId] = useState<number | null>(null);
  
  // Contexte d'authentification pour la s√©curit√©
  const { isAuthenticated, logout } = useAuth();
  
  // R√©f√©rence pour l'adresse autoris√©e (s√©curit√©)
  const authorizedAddressRef = useRef<string | null>(null);
  const isSecurityInitializedRef = useRef(false);

  // Fonction pour r√©cup√©rer le solde d'un token
  const getTokenBalance = async (tokenAddress: string, userAddress: string): Promise<number> => {
    try {
      if (!window.ethereum || !userAddress) return 0;

      const provider = new ethers.BrowserProvider(window.ethereum);
      const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
      
      const [balance, decimals] = await Promise.all([
        contract.balanceOf(userAddress),
        contract.decimals()
      ]);
      
      const formattedBalance = ethers.formatUnits(balance, decimals);
      return parseFloat(formattedBalance);
    } catch (error) {
      console.error('Erreur r√©cup√©ration solde token:', error);
      return 0;
    }
  };

  // Fonction pour forcer la demande de permissions (r√©sout le probl√®me du globe MetaMask)
const requestAccountPermissions = useCallback(async () => {
  if (!window.ethereum) {
    console.error('MetaMask non d√©tect√©');
    return;
  }

  try {
    // Cette m√©thode force MetaMask √† reconna√Ætre le site comme connect√©
    await window.ethereum.request({
      method: 'wallet_requestPermissions',
      params: [{ eth_accounts: {} }]
    });
    
    console.log('‚úÖ Permissions MetaMask mises √† jour');
  } catch (error) {
    console.error('Erreur demande permissions:', error);
  }
}, []);

  // Fonction pour mettre √† jour tous les soldes
  const updateBalances = useCallback(async (userAddress: string) => {
    try {
      console.log('Mise √† jour des soldes pour:', userAddress);
      
      const [usdtBalance, usdcBalance] = await Promise.all([
        getTokenBalance(TOKEN_ADDRESSES.USDT, userAddress),
        getTokenBalance(TOKEN_ADDRESSES.USDC, userAddress)
      ]);

      console.log('Soldes r√©cup√©r√©s - USDT:', usdtBalance, 'USDC:', usdcBalance);
      
      setBalance({
        usdt: usdtBalance,
        usdc: usdcBalance
      });
    } catch (error) {
      console.error('Erreur mise √† jour soldes:', error);
    }
  }, []);

  // Fonction de v√©rification de s√©curit√©
  const checkAddressSecurity = useCallback((currentAddress: string | null) => {
    if (!isAuthenticated || !currentAddress) return true;

    // Si pas encore initialis√©, enregistrer l'adresse actuelle comme autoris√©e
    if (!isSecurityInitializedRef.current) {
      authorizedAddressRef.current = currentAddress.toLowerCase();
      isSecurityInitializedRef.current = true;
      console.log('üîí Adresse autoris√©e enregistr√©e:', currentAddress);
      return true;
    }

    // V√©rifier si l'adresse actuelle correspond √† l'adresse autoris√©e
    const isAuthorized = currentAddress.toLowerCase() === authorizedAddressRef.current;
    
    if (!isAuthorized) {
      console.error('üö® ALERTE S√âCURIT√â: Changement d\'adresse non autoris√© d√©tect√©');
      console.error('Adresse autoris√©e:', authorizedAddressRef.current);
      console.error('Adresse actuelle:', currentAddress.toLowerCase());
      
      // D√©connecter imm√©diatement
      handleSecurityBreach();
      return false;
    }

    return true;
  }, [isAuthenticated]);

  // Fonction pour g√©rer les violations de s√©curit√©
  const handleSecurityBreach = useCallback(() => {
    console.log('üîí D√©connexion de s√©curit√© en cours...');
    
    // Nettoyer les donn√©es locales
    setAddress(null);
    setBalance({ usdt: 0, usdc: 0 });
    setIsConnected(false);
    setChainId(null);
    localStorage.removeItem('walletConnected');
    
    // R√©initialiser les r√©f√©rences de s√©curit√©
    authorizedAddressRef.current = null;
    isSecurityInitializedRef.current = false;
    
    // D√©connecter l'utilisateur de la plateforme
    logout();
    
    // Afficher un message de s√©curit√©
    setTimeout(() => {
      alert('Changement d\'adresse wallet d√©tect√©. Vous avez √©t√© d√©connect√© pour des raisons de s√©curit√©.');
    }, 100);
  }, [logout]);

  // Fonction de connexion
  const connectWallet = async () => {
  console.log('üîå Tentative de connexion wallet...');
  console.log('üì± Appareil mobile:', isMobileDevice());
  
  if (!isAuthenticated) {
    alert('Vous devez d\'abord vous authentifier sur la plateforme');
    return;
  }

  setIsConnecting(true);
  
  try {
    // √âTAPE 1: Attendre que MetaMask soit disponible
    const isMetaMaskAvailable = await waitForMetaMask(5000);
    
    if (!isMetaMaskAvailable) {
      console.log('‚ùå MetaMask non d√©tect√© apr√®s attente');
      
      if (isMobileDevice()) {
        const shouldOpenMetaMask = confirm(
          'MetaMask n\'est pas d√©tect√©. Voulez-vous ouvrir l\'application MetaMask ?'
        );
        
        if (shouldOpenMetaMask) {
          openMetaMaskMobile();
        }
      } else {
        alert('Veuillez installer MetaMask ou utiliser le navigateur int√©gr√© de MetaMask');
      }
      
      setIsConnecting(false);
      return;
    }

    console.log('‚úÖ MetaMask d√©tect√©, connexion en cours...');

    // √âTAPE 2: Demander les permissions (important pour mobile)
    try {
      await window.ethereum.request({
        method: 'wallet_requestPermissions',
        params: [{ eth_accounts: {} }]
      });
    } catch (permError) {
      console.log('‚ö†Ô∏è Permissions d√©j√† accord√©es ou erreur:', permError);
      // Continuer m√™me si les permissions √©chouent
    }
    
    // √âTAPE 3: Demander les comptes
    const accounts = await window.ethereum.request({
      method: 'eth_requestAccounts'
    });

    if (accounts && accounts.length > 0) {
      const userAddress = accounts[0];
      
      console.log('‚úÖ Compte r√©cup√©r√©:', userAddress);
      
      // V√©rification de s√©curit√©
      if (!checkAddressSecurity(userAddress)) {
        setIsConnecting(false);
        return;
      }
      
      setAddress(userAddress);
      setIsConnected(true);
      localStorage.setItem('walletConnected', 'true');
      
      console.log('üéâ Connexion r√©ussie sur mobile!');
      
      // Charger les soldes
      await updateBalances(userAddress);
    } else {
      throw new Error('Aucun compte disponible');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur connexion mobile:', error);
    
    // Messages d'erreur sp√©cifiques
    if (error.code === 4001) {
      alert('Connexion refus√©e par l\'utilisateur');
    } else if (error.code === -32002) {
      alert('Une demande de connexion est d√©j√† en cours dans MetaMask');
    } else {
      alert(`Erreur de connexion: ${error.message || 'Erreur inconnue'}`);
    }
  } finally {
    setIsConnecting(false);
  }
};

// Fonction pour permettre le changement de compte
const changeAccount = useCallback(async () => {
  if (!window.ethereum) {
    console.error('MetaMask non d√©tect√©');
    return;
  }

  try {
    // Force MetaMask √† afficher le s√©lecteur de compte
    await window.ethereum.request({
      method: 'wallet_requestPermissions',
      params: [{ eth_accounts: {} }]
    });
    
    // R√©cup√©rer le nouveau compte s√©lectionn√©
    const accounts = await window.ethereum.request({
      method: 'eth_accounts'
    });
    
    if (accounts.length > 0) {
      const newAddress = accounts[0];
      console.log('üîÑ Nouveau compte s√©lectionn√©:', newAddress);
      
      // Note: Votre syst√®me de s√©curit√© va d√©tecter ce changement
      // et d√©cider s'il est autoris√© ou non
    }
  } catch (error) {
    console.error('Erreur changement compte:', error);
  }
}, []);

  // Fonction de d√©connexion
  const disconnectWallet = useCallback(() => {
    console.log('üîå D√©connexion du wallet...');
    setAddress(null);
    setBalance({ usdt: 0, usdc: 0 });
    setIsConnected(false);
    setChainId(null);
    localStorage.removeItem('walletConnected');
    
    // Ne pas r√©initialiser les r√©f√©rences de s√©curit√© ici
    // car cela pourrait √™tre une d√©connexion volontaire
  }, []);

  // Fonction pour v√©rifier la connexion wallet
  const checkWalletConnection = useCallback(async () => {
  console.log('üîç V√©rification connexion wallet mobile...');
  
  if (!isAuthenticated) {
    return;
  }

  try {
    // Attendre que MetaMask soit disponible
    const isAvailable = await waitForMetaMask(2000);
    
    if (!isAvailable) {
      console.log('‚ùå MetaMask non disponible pour la v√©rification');
      return;
    }

    const accounts = await window.ethereum.request({ method: 'eth_accounts' });
    
    if (accounts && accounts.length > 0) {
      const currentAddress = accounts[0];
      console.log('‚úÖ Compte trouv√© lors de la v√©rification:', currentAddress);
      
      if (!checkAddressSecurity(currentAddress)) {
        return;
      }
      
      setAddress(currentAddress);
      setIsConnected(true);
      await updateBalances(currentAddress);
    } else {
      console.log('‚ùå Aucun compte trouv√©');
      setAddress(null);
      setIsConnected(false);
    }
  } catch (error) {
    console.error('‚ùå Erreur v√©rification connexion mobile:', error);
    setAddress(null);
    setIsConnected(false);
  }
}, [isAuthenticated, checkAddressSecurity, updateBalances]);

  // Fonction pour rafra√Æchir les soldes
  const refreshBalances = useCallback(async () => {
    if (address && isAuthenticated) {
      await updateBalances(address);
    }
  }, [address, isAuthenticated, updateBalances]);

  // Fonction pour changer de r√©seau
  const switchNetwork = async (targetChainId: number) => {
  if (!window.ethereum) {
    throw new Error('MetaMask non disponible');
  }

  console.log('üîÑ Tentative de changement vers chainId:', targetChainId);

  try {
    const hexChainId = `0x${targetChainId.toString(16)}`;
    console.log('üîÑ HexChainId:', hexChainId);

    // Essayer de changer vers le r√©seau existant
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: hexChainId }],
    });
    
    console.log('‚úÖ Changement de r√©seau r√©ussi vers chainId:', targetChainId);
    
  } catch (switchError: any) {
    console.log('‚ùå Erreur lors du switch, code:', switchError.code);
    
    // Si le r√©seau n'existe pas (code 4902), l'ajouter
    if (switchError.code === 4902) {
      console.log('üì• Le r√©seau BSC n\'existe pas, ajout en cours...');
      
      try {
        // Configuration compl√®te pour BSC
        const bscNetworkConfig = {
          chainId: '0x38', // 56 en hexad√©cimal pour BSC
          chainName: 'BNB Smart Chain',
          nativeCurrency: {
            name: 'BNB',
            symbol: 'BNB',
            decimals: 18
          },
          rpcUrls: [
            'https://bsc-dataseed1.binance.org/',
            'https://bsc-dataseed2.binance.org/',
            'https://bsc-dataseed3.binance.org/',
            'https://bsc-dataseed4.binance.org/',
          ],
          blockExplorerUrls: ['https://bscscan.com/']
        };

        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [bscNetworkConfig]
        });
        
        console.log('‚úÖ R√©seau BSC ajout√© avec succ√®s');
        
      } catch (addError: any) {
        console.error('‚ùå Erreur lors de l\'ajout du r√©seau BSC:', addError);
        
        // Messages d'erreur sp√©cifiques
        if (addError.code === 4001) {
          throw new Error('Ajout du r√©seau refus√© par l\'utilisateur');
        } else {
          throw new Error(`Impossible d'ajouter le r√©seau BSC: ${addError.message}`);
        }
      }
    } else {
      // Autres erreurs lors du changement
      if (switchError.code === 4001) {
        throw new Error('Changement de r√©seau refus√© par l\'utilisateur');
      } else if (switchError.code === -32002) {
        throw new Error('Une demande est d√©j√† en cours dans MetaMask');
      } else {
        throw new Error(`Erreur lors du changement de r√©seau: ${switchError.message}`);
      }
    }
  }
};

  // Fonction utilitaire pour diagnostiquer les probl√®mes mobile
const diagnosticMetaMaskMobile = () => {
  const info = {
    userAgent: navigator.userAgent,
    isMobile: isMobileDevice(),
    hasEthereum: !!window.ethereum,
    isMetaMask: window.ethereum?.isMetaMask,
    isMetaMaskApp: /MetaMask/i.test(navigator.userAgent),
    ethereumProviders: Object.keys(window.ethereum?.providers || {}),
    windowKeys: Object.keys(window).filter(key => key.includes('eth') || key.includes('web3'))
  };
  
  console.log('üîç Diagnostic MetaMask Mobile:', info);
  return info;
};

  // Effet pour la reconnexion automatique
  useEffect(() => {
  const checkInitialConnection = async () => {
    const wasConnected = localStorage.getItem('walletConnected') === 'true';
    
    if (!wasConnected || !isAuthenticated) {
      return;
    }

    console.log('üîÑ Tentative de reconnexion automatique...');
    
    try {
      // Sur mobile, attendre que MetaMask soit disponible
      const isMetaMaskAvailable = await waitForMetaMask(3000);
      
      if (!isMetaMaskAvailable) {
        console.log('‚ùå MetaMask non disponible pour la reconnexion');
        localStorage.removeItem('walletConnected'); // Nettoyer le flag
        return;
      }

      const accounts = await window.ethereum.request({ method: 'eth_accounts' });
      
      if (accounts && accounts.length > 0) {
        const userAddress = accounts[0];
        
        console.log('üîÑ Reconnexion trouv√©e:', userAddress);
        
        // Pour la reconnexion automatique, enregistrer comme autoris√©
        if (!isSecurityInitializedRef.current) {
          authorizedAddressRef.current = userAddress.toLowerCase();
          isSecurityInitializedRef.current = true;
          console.log('üîí Adresse autoris√©e lors de la reconnexion mobile:', userAddress);
        }
        
        // V√©rification de s√©curit√©
        if (checkAddressSecurity(userAddress)) {
          setAddress(userAddress);
          setIsConnected(true);
          console.log('‚úÖ Reconnexion automatique r√©ussie sur mobile');
          await updateBalances(userAddress);
        }
      } else {
        console.log('‚ùå Aucun compte trouv√© pour la reconnexion');
        localStorage.removeItem('walletConnected');
      }
    } catch (error) {
      console.error('‚ùå Erreur reconnexion mobile:', error);
      localStorage.removeItem('walletConnected');
    }
  };

  if (isAuthenticated) {
    // Sur mobile, attendre un peu plus longtemps avant de v√©rifier
    const delay = isMobileDevice() ? 1000 : 500;
    
    setTimeout(() => {
      checkInitialConnection();
    }, delay);
  }
}, [isAuthenticated, checkAddressSecurity, updateBalances]);

  // Effet pour r√©cup√©rer le chainId initial
  // Effet pour r√©cup√©rer et maintenir le chainId synchronis√©
useEffect(() => {
  const getCurrentChainId = async () => {
    if (window.ethereum && isConnected) {
      try {
        const chainId = await window.ethereum.request({ method: 'eth_chainId' });
        const numericChainId = parseInt(chainId, 16);
        
        console.log('üîç WalletContext ChainId Debug:', {
          rawChainId: chainId,
          numericChainId,
          isBSC: numericChainId === 56,
          isConnected
        });
        
        setChainId(numericChainId);
      } catch (error) {
        console.error('Erreur r√©cup√©ration chainId:', error);
        setChainId(null);
      }
    } else {
      // Si pas connect√©, reset le chainId
      setChainId(null);
    }
  };
  
  // R√©cup√©rer le chainId initial et √† chaque changement de connexion
  getCurrentChainId();
  
  // V√©rification p√©riodique du chainId quand connect√©
  let chainCheckInterval: NodeJS.Timeout;
  
  if (isConnected && window.ethereum) {
    chainCheckInterval = setInterval(getCurrentChainId, 2000);
  }
  
  return () => {
    if (chainCheckInterval) {
      clearInterval(chainCheckInterval);
    }
  };
}, [isConnected]); // D√©pendance sur isConnected

  // Effet pour les √©v√©nements MetaMask avec s√©curit√©
  useEffect(() => {
    if (!window.ethereum || !isAuthenticated) return;

    const handleAccountsChanged = async (accounts: string[]) => {
      console.log('üîÑ Changement d\'adresse MetaMask d√©tect√©:', accounts);
      
      if (accounts.length === 0) {
        // L'utilisateur a d√©connect√© MetaMask
        console.log('‚ùå Aucun compte MetaMask disponible');
        disconnectWallet();
        return;
      }

      const newAddress = accounts[0];
      
      // V√©rification de s√©curit√© critique
      if (!checkAddressSecurity(newAddress)) {
        // La fonction checkAddressSecurity g√®re d√©j√† la d√©connexion
        return;
      }

      // Si l'adresse est autoris√©e, mettre √† jour
      setAddress(newAddress);
      setIsConnected(true);
      await updateBalances(newAddress);
    };

    const handleChainChanged = async (chainId: string) => {
      const newChainId = parseInt(chainId, 16);
      console.log('üîó Changement de r√©seau d√©tect√©:', newChainId);
      setChainId(newChainId);
      
      if (address && isAuthenticated) {
        await updateBalances(address);
      }
    };

    // Ajouter les √©couteurs d'√©v√©nements
    if (window.ethereum.on) {
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);
    }

    // V√©rification p√©riodique de s√©curit√© (backup)
    const securityCheckInterval = setInterval(async () => {
      if (!window.ethereum || !isAuthenticated) return;

      try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        if (accounts.length > 0) {
          checkAddressSecurity(accounts[0]);
        }
      } catch (error) {
        console.error('Erreur lors de la v√©rification de s√©curit√© p√©riodique:', error);
      }
    }, 3000); // V√©rifier toutes les 3 secondes

    // Nettoyage
    return () => {
      if (window.ethereum.removeListener) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
      clearInterval(securityCheckInterval);
    };
  }, [address, isAuthenticated, checkAddressSecurity, updateBalances, disconnectWallet]);

  // Effet pour g√©rer la d√©connexion de la plateforme
  useEffect(() => {
    if (!isAuthenticated) {
      // R√©initialiser compl√®tement en cas de d√©connexion de la plateforme
      setAddress(null);
      setBalance({ usdt: 0, usdc: 0 });
      setIsConnected(false);
      setChainId(null);
      localStorage.removeItem('walletConnected');
      
      // R√©initialiser les r√©f√©rences de s√©curit√©
      authorizedAddressRef.current = null;
      isSecurityInitializedRef.current = false;
      
      console.log('üîí Wallet d√©connect√© suite √† la d√©connexion de la plateforme');
    }
  }, [isAuthenticated]);

  const value: WalletContextType = {
    address,
    balance,
    connectWallet,
    disconnectWallet,
    isConnecting,
    isConnected,
    chainId,
    switchNetwork,
    refreshBalances,
    checkWalletConnection,
    requestAccountPermissions,
    changeAccount
  };

  return (
    <WalletContext.Provider value={value}>
      {children}
    </WalletContext.Provider>
  );
};

export const useWallet = () => {
  const context = useContext(WalletContext);
  if (context === undefined) {
    throw new Error('useWallet doit √™tre utilis√© √† l\'int√©rieur d\'un WalletProvider');
  }
  return context;
};