// src/pages/CommunityRegistrationPage.tsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  HStack,
  Heading,
  Text,
  Alert,
  AlertIcon,
  Container,
  useColorModeValue,
  useToast,
  Flex,
  Divider,
  useBreakpointValue,
  Checkbox,
  Link,
  Progress,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Icon,
} from '@chakra-ui/react';
import { ExternalLinkIcon } from '@chakra-ui/icons';
import { supabase } from '../lib/supabase';

// Types
interface CommunityRegistrationForm {
  username: string;
  email: string;
  phone: string;
  charterAccepted: boolean;
  participationConfirmed: boolean;
  responsibilityAccepted: boolean;
  respectConfirmed: boolean;
}

const CommunityRegistrationPage: React.FC = () => {
  const [formData, setFormData] = useState<CommunityRegistrationForm>({
    username: '',
    email: '',
    phone: '',
    charterAccepted: false,
    participationConfirmed: false,
    responsibilityAccepted: false,
    respectConfirmed: false
  });
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [currentStep, setCurrentStep] = useState<number>(1);

  const toast = useToast();
  const { isOpen: isCharterOpen, onOpen: onCharterOpen, onClose: onCharterClose } = useDisclosure();

  // Styles Chakra UI
  const cardBg = useColorModeValue('rgba(255, 255, 255, 0.95)', 'rgba(26, 32, 44, 0.95)');

  // Responsive values
  const containerMaxW = useBreakpointValue({ base: 'sm', md: 'lg', lg: 'xl' });
  const cardPadding = useBreakpointValue({ base: 6, md: 10 });
  const headingSize = useBreakpointValue({ base: 'xl', md: '2xl' });

  // Fonction pour envoyer une notification email √† l'administrateur
  // Fonction temporaire pour envoyer une notification email √† l'administrateur
// Fonction finale pour envoyer une notification email √† l'administrateur
const sendAdminNotification = async (memberData: any) => {
  try {
    console.log('üìß Envoi notification admin pour:', memberData.username);
    
    const response = await fetch('/api/send-admin-notification', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        memberData: {
          username: memberData.username,
          email: memberData.email,
          phone: memberData.phone,
          registrationDate: memberData.acceptance_timestamp,
          registrationIP: memberData.acceptance_ip
        }
      })
    });

    // V√©rifier si la r√©ponse est OK
    if (!response.ok) {
      let errorMessage = `Erreur HTTP ${response.status}`;
      
      // Essayer de parser la r√©ponse d'erreur
      try {
        const errorData = await response.json();
        errorMessage = errorData.error || errorMessage;
        console.error('‚ùå Erreur API:', errorData);
      } catch (parseError) {
        console.warn('Impossible de parser la r√©ponse d\'erreur');
      }
      
      throw new Error(errorMessage);
    }

    // Parser la r√©ponse de succ√®s
    const result = await response.json();
    
    if (result.fallback) {
      console.warn('‚ö†Ô∏è Email envoy√© en mode fallback:', result.message);
    } else {
      console.log('‚úÖ Email admin envoy√© avec succ√®s:', result.message);
    }
    
    return result;

  } catch (error) {
    console.error('‚ùå Erreur notification admin:', error);
    
    // Informations de debug
    if (error.message.includes('fetch')) {
      console.error('üîç V√©rifiez que les deux serveurs tournent:');
      console.error('   - Backend: http://localhost:3001/health');
      console.error('   - Frontend: http://localhost:5173');
    }
    
    // Ne pas faire √©chouer l'inscription
    throw error;
  }
};

  // Fonction pour obtenir l'IP utilisateur
  const getUserIP = async (): Promise<string> => {
    try {
      const response = await fetch('https://api.ipify.org?format=json');
      const data = await response.json();
      return data.ip;
    } catch (error) {
      console.error('Erreur r√©cup√©ration IP:', error);
      return 'unknown';
    }
  };

  // D√©marrer l'inscription
  const startRegistration = () => {
    setCurrentStep(2);
  };

  // Gestion des changements de formulaire
  const handleInputChange = (field: keyof CommunityRegistrationForm, value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // V√©rifier si le formulaire est valide
  const isFormValid = (): boolean => {
    return (
      formData.username.trim() !== '' &&
      formData.email.trim() !== '' &&
      formData.charterAccepted &&
      formData.participationConfirmed &&
      formData.responsibilityAccepted &&
      formData.respectConfirmed
    );
  };

  // Enregistrer l'inscription
  // Fonction d'inscription simplifi√©e (remplace registerCommunityMember)
const registerCommunityMember = async () => {
  try {
    setIsLoading(true);
    setError('');

    // V√©rifier si l'email n'est pas d√©j√† utilis√©
    const { data: existingEmailData, error: checkEmailError } = await supabase
      .from('community_members')
      .select('email')
      .eq('email', formData.email.trim().toLowerCase());

    if (checkEmailError && checkEmailError.code !== 'PGRST116') {
      console.error('Erreur v√©rification email:', checkEmailError);
      setError('Erreur lors de la v√©rification de l\'email.');
      return;
    }

    if (existingEmailData && existingEmailData.length > 0) {
      setError('Cette adresse email est d√©j√† utilis√©e pour une inscription.');
      return;
    }

    // V√©rifier si le t√©l√©phone n'est pas d√©j√† utilis√© (si renseign√©)
    if (formData.phone.trim()) {
      const { data: existingPhoneData, error: checkPhoneError } = await supabase
        .from('community_members')
        .select('phone')
        .eq('phone', formData.phone.trim());

      if (checkPhoneError && checkPhoneError.code !== 'PGRST116') {
        console.error('Erreur v√©rification t√©l√©phone:', checkPhoneError);
        setError('Erreur lors de la v√©rification du t√©l√©phone.');
        return;
      }

      if (existingPhoneData && existingPhoneData.length > 0) {
        setError('Ce num√©ro de t√©l√©phone est d√©j√† utilis√© pour une inscription.');
        return;
      }
    }

    // Cr√©er l'inscription SANS r√©cup√©rer l'IP c√¥t√© client
    const { data, error: insertError } = await supabase
      .from('community_members')
      .insert([{
        username: formData.username.trim(),
        email: formData.email.trim().toLowerCase(),
        phone: formData.phone.trim() || null,
        acceptance_ip: null, // L'IP sera g√©r√©e c√¥t√© serveur dans l'email
        charter_accepted: true,
        charter_version: '1.0',
        acceptance_timestamp: new Date().toISOString(),
        status: 'pending',
        registration_method: 'public'
      }])
      .select()
      .single();

    if (insertError) {
      throw new Error('Erreur lors de l\'enregistrement: ' + insertError.message);
    }

    // Envoyer un email de notification √† l'administrateur
    try {
      await sendAdminNotification(data);
    } catch (emailError) {
      console.error('Erreur envoi email admin:', emailError);
      // Ne pas faire √©chouer l'inscription si l'email √©choue
    }

    setSuccess('Inscription r√©ussie ! Vous recevrez bient√¥t les informations pour rejoindre notre groupe et formations.');
    setCurrentStep(3);

  } catch (error: any) {
    console.error('Erreur inscription:', error);
    setError('Erreur lors de l\'inscription: ' + (error.message || 'Erreur inconnue'));
  } finally {
    setIsLoading(false);
  }
};

  // Gestion de la soumission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isFormValid()) {
      setError('Veuillez remplir tous les champs obligatoires et accepter toutes les conditions.');
      return;
    }
    await registerCommunityMember();
  };

  return (
    <Box
      minH="100vh"
      position="relative"
      overflow="hidden"
      background="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
    >
      {/* √âl√©ments d√©coratifs */}
      <Box
        position="absolute"
        top="10%"
        left="10%"
        w={{ base: "100px", md: "200px" }}
        h={{ base: "100px", md: "200px" }}
        bg="rgba(255, 255, 255, 0.1)"
        rounded="full"
        filter="blur(40px)"
        display={{ base: "none", md: "block" }}
      />
      
      <Flex
        minH="100vh"
        align="center"
        justify="center"
        p={{ base: 4, md: 4 }}
        position="relative"
        zIndex={1}
      >
        <Container maxW={containerMaxW} w="full">
          <Box
            bg={cardBg}
            backdropFilter="blur(20px)"
            border="1px solid rgba(255, 255, 255, 0.2)"
            borderRadius={{ base: '2xl', md: '3xl' }}
            shadow="2xl"
            p={cardPadding}
            position="relative"
            overflow="hidden"
            w="full"
          >
            {/* En-t√™te */}
            <VStack spacing={6} align="stretch">
              <Box textAlign="center">
                <Box
                  p={{ base: 4, md: 6 }}
                  bg="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                  rounded="full"
                  shadow="xl"
                  w={{ base: 16, md: 20 }}
                  h={{ base: 16, md: 20 }}
                  display="flex"
                  alignItems="center"
                  justifyContent="center"
                  mx="auto"
                  mb={4}
                >
                  <Text fontSize={{ base: "2xl", md: "4xl" }} fontWeight="bold" color="white">üåü</Text>
                </Box>
                
                <Heading
                  size={headingSize}
                  bgGradient="linear(to-r, #667eea, #764ba2)"
                  bgClip="text"
                  textAlign="center"
                  fontWeight="800"
                  lineHeight="1.2"
                  mb={2}
                >
                  Rejoindre la Communaut√© RMR-M
                </Heading>
                
                <Text
                  fontSize={{ base: "sm", md: "lg" }}
                  color="gray.600"
                  textAlign="center"
                  px={{ base: 2, md: 0 }}
                >
                  Vous avez √©t√© invit√©(e) √† rejoindre notre communaut√© priv√©e d'√©ducation crypto
                </Text>
              </Box>

              {/* Barre de progression */}
              <Box>
                <Text fontSize="sm" color="orange.600" mb={2}>
                  √âtape {currentStep} sur 3
                </Text>
                <Progress 
                  value={(currentStep / 3) * 100} 
                  colorScheme="purple" 
                  size="sm" 
                  borderRadius="full"
                />
              </Box>

              {/* Messages d'erreur et succ√®s */}
              {error && (
                <Alert status="error" borderRadius="xl">
                  <AlertIcon />
                  <Text fontSize={{ base: "sm", md: "md" }}>{error}</Text>
                </Alert>
              )}

              {success && (
                <Alert status="success" borderRadius="xl">
                  <AlertIcon />
                  <Text fontSize={{ base: "sm", md: "md" }}>{success}</Text>
                </Alert>
              )}

              {/* √âtape 1: Pr√©sentation Charte */}
              {currentStep === 1 && !success && (
                <Box>
                  <Heading size="lg" mb={4} color="orange.600">
                    üìã Charte de la Communaut√©
                  </Heading>
                  
                  <Box bg="blue.50" borderRadius="xl" p={6} mb={4}>
                    <Heading size="md" color="blue.800" mb={3}>
                      Points Cl√©s √† Retenir :
                    </Heading>
                    <VStack spacing={3} align="start">
                      <HStack>
                        <Text fontSize="xl">üïò</Text>
                        <Text fontSize="sm" color="blue.700">
                          <Text as="span" fontWeight="bold">Formations quotidiennes</Text> : Tous les soirs √† 21h30 (GMT+3)
                        </Text>
                      </HStack>
                      <HStack>
                        <Text fontSize="xl">üìÖ</Text>
                        <Text fontSize="sm" color="blue.700">
                          <Text as="span" fontWeight="bold">R√®gle d'absence</Text> : Maximum 4 absences sur 6 sessions
                        </Text>
                      </HStack>
                      <HStack>
                        <Text fontSize="xl">ü§ù</Text>
                        <Text fontSize="sm" color="blue.700">
                          <Text as="span" fontWeight="bold">Respect absolu</Text> : Aucune insulte, provocation ou commentaire haineux
                        </Text>
                      </HStack>
                      <HStack>
                        <Text fontSize="xl">üí™</Text>
                        <Text fontSize="sm" color="blue.700">
                          <Text as="span" fontWeight="bold">Responsabilit√© personnelle</Text> : Vous √™tes responsable de toutes vos d√©cisions
                        </Text>
                      </HStack>
                    </VStack>
                  </Box>

                  <Button
                    leftIcon={<Icon as={ExternalLinkIcon} />}
                    colorScheme="blue"
                    variant="outline"
                    onClick={onCharterOpen}
                    mb={6}
                  >
                    Lire la Charte Compl√®te
                  </Button>

                  <Button
                    onClick={startRegistration}
                    bg="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                    color="white"
                    size="lg"
                    width="full"
                    _hover={{
                      bg: "linear-gradient(135deg, #5a6fd8 0%, #6b4190 100%)",
                      transform: 'translateY(-2px)',
                    }}
                    borderRadius="xl"
                    py={6}
                    fontSize="lg"
                    fontWeight="600"
                    leftIcon={<Text fontSize="xl">üìù</Text>}
                  >
                    M'inscrire √† la Communaut√©
                  </Button>
                </Box>
              )}

              {/* √âtape 2: Formulaire d'inscription */}
              {currentStep === 2 && !success && (
                <Box as="form" onSubmit={handleSubmit}>
                  <Heading size="lg" mb={6} color="orange.600">
                    üìù Inscription √† la Communaut√©
                  </Heading>
                  
                  <VStack spacing={6}>
                    {/* Informations utilisateur */}
                    <FormControl isRequired>
                      <FormLabel color="white" fontWeight="600">
                        Nom d'utilisateur
                      </FormLabel>
                      <Input
                        value={formData.username}
                        onChange={(e) => handleInputChange('username', e.target.value)}
                        placeholder="Votre nom d'utilisateur"
                        borderRadius="xl"
                        bg="white"
                        color="black"
                        borderColor="gray.200"
                        _focus={{ borderColor: 'purple.500', boxShadow: '0 0 0 3px rgba(102, 126, 234, 0.1)' }}
                      />
                    </FormControl>

                    <FormControl isRequired>
                      <FormLabel color="white" fontWeight="600">
                        Email de contact
                      </FormLabel>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => handleInputChange('email', e.target.value)}
                        placeholder="votre@email.com"
                        borderRadius="xl"
                        bg="white"
                        color="black"
                        borderColor="gray.200"
                        _focus={{ borderColor: 'purple.500', boxShadow: '0 0 0 3px rgba(102, 126, 234, 0.1)' }}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel color="white" fontWeight="600">
                        T√©l√©phone (pour signalement absences)
                      </FormLabel>
                      <Input
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => handleInputChange('phone', e.target.value)}
                        placeholder="+262 692 XX XX XX"
                        borderRadius="xl"
                        bg="white"
                        color="black"
                        borderColor="gray.200"
                        _focus={{ borderColor: 'purple.500', boxShadow: '0 0 0 3px rgba(102, 126, 234, 0.1)' }}
                      />
                    </FormControl>

                    {/* Acceptations obligatoires */}
                    <Box w="full">
                      <Heading size="md" mb={4} color="orange.600">
                        Acceptations Obligatoires
                      </Heading>
                      
                      <VStack spacing={4} align="start">
                        <Checkbox
                          isChecked={formData.charterAccepted}
                          onChange={(e) => handleInputChange('charterAccepted', e.target.checked)}
                          colorScheme="purple"
                          size="md"
                        >
                          <Text fontSize="sm" color="white">
                            J'ai lu et j'accepte int√©gralement la{' '}
                            <Link color="purple.300" onClick={onCharterOpen} textDecoration="underline">
                              Charte de la Communaut√© RMR
                            </Link>
                          </Text>
                        </Checkbox>

                        <Checkbox
                          isChecked={formData.participationConfirmed}
                          onChange={(e) => handleInputChange('participationConfirmed', e.target.checked)}
                          colorScheme="purple"
                          size="md"
                        >
                          <Text fontSize="sm" color="white">
                            Je m'engage √† participer aux formations quotidiennes (21h30 GMT+3) 
                            et √† respecter la r√®gle des absences (max 4/6 sessions)
                          </Text>
                        </Checkbox>

                        <Checkbox
                          isChecked={formData.responsibilityAccepted}
                          onChange={(e) => handleInputChange('responsibilityAccepted', e.target.checked)}
                          colorScheme="orange"
                          size="md"
                        >
                          <Text fontSize="sm" fontWeight="medium" color="white">
                            J'accepte la responsabilit√© totale de mes d√©cisions d'investissement 
                            et comprends que toute d√©cision sera ma d√©cision personnelle
                          </Text>
                        </Checkbox>

                        <Checkbox
                          isChecked={formData.respectConfirmed}
                          onChange={(e) => handleInputChange('respectConfirmed', e.target.checked)}
                          colorScheme="purple"
                          size="md"
                        >
                          <Text fontSize="sm" color="white">
                            Je m'engage √† maintenir un comportement respectueux en toutes 
                            circonstances au sein de la communaut√©
                          </Text>
                        </Checkbox>
                      </VStack>
                    </Box>

                    {/* Informations importantes */}
                    <Box bg="blue.50" p={4} borderRadius="xl" w="full">
                      <HStack align="start">
                        <Text fontSize="xl">üìû</Text>
                        <VStack align="start" spacing={1}>
                          <Text fontWeight="bold" color="blue.800">
                            Canaux de Communication
                          </Text>
                          <Text fontSize="sm" color="blue.700">
                            Pour signaler vos absences, utilisez : WhatsApp, SMS, T√©l√©phone, 
                            Email, Telegram ou Messenger. Les contacts vous seront fournis 
                            apr√®s votre inscription.
                          </Text>
                        </VStack>
                      </HStack>
                    </Box>

                    {/* Boutons d'action */}
                    <HStack spacing={4} w="full">
                      <Button
                        variant="outline"
                        size="lg"
                        onClick={() => setCurrentStep(1)}
                        borderColor="white"
                        color="white"
                        _hover={{ bg: "rgba(255,255,255,0.1)" }}
                        borderRadius="xl"
                        flex={1}
                      >
                        Retour
                      </Button>

                      <Button
                        type="submit"
                        size="lg"
                        bg="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                        color="white"
                        _hover={{
                          transform: 'translateY(-2px)',
                          shadow: 'xl',
                          bg: 'linear-gradient(135deg, #5a6fd8 0%, #6b4190 100%)',
                        }}
                        isLoading={isLoading}
                        loadingText="Inscription en cours..."
                        disabled={!isFormValid() || isLoading}
                        borderRadius="xl"
                        fontSize="lg"
                        fontWeight="600"
                        leftIcon={<Text fontSize="xl">üåü</Text>}
                        flex={2}
                      >
                        Confirmer mon Inscription
                      </Button>
                    </HStack>
                  </VStack>
                </Box>
              )}

              {/* √âtape 3: Message de succ√®s */}
              {success && currentStep === 3 && (
                <Box textAlign="center">
                  <Box bg="green.50" borderRadius="xl" p={8}>
                    <Text fontSize="5xl" mb={4}>üéâ</Text>
                    <Heading size="xl" color="green.800" mb={4}>
                      Bienvenue dans la Communaut√© RMR-M !
                    </Heading>
                    <VStack spacing={3} color="green.700">
                      <HStack>
                        <Text fontSize="xl">‚úÖ</Text>
                        <Text>Votre inscription a √©t√© enregistr√©e avec succ√®s</Text>
                      </HStack>
                      <HStack>
                        <Text fontSize="xl">‚úÖ</Text>
                        <Text>Vous recevrez bient√¥t un email de bienvenue</Text>
                      </HStack>
                      <HStack>
                        <Text fontSize="xl">‚úÖ</Text>
                        <Text>Les liens pour rejoindre nos groupes vous seront envoy√©s</Text>
                      </HStack>
                    </VStack>
                    
                    <Box mt={6} bg="blue.50" borderRadius="lg" p={4}>
                      <Heading size="md" color="blue.800" mb={2}>
                        üìÖ Prochaines √âtapes :
                      </Heading>
                      <VStack spacing={2} fontSize="sm" color="blue.700">
                        <Text>1. Attendre l'email de confirmation avec les d√©tails</Text>
                        <Text>2. Rejoindre le groupe WhatsApp</Text>
                        <Text>3. Participer √† la prochaine formation webinaire (21h30 GMT+4)</Text>
                        <Text>4. Une fois form√©, voir comment acc√©der √† la plateforme de r√©compense</Text>
                      </VStack>
                    </Box>
                  </Box>
                </Box>
              )}
            </VStack>
          </Box>
        </Container>
      </Flex>

      {/* Modal Charte */}
      <Modal isOpen={isCharterOpen} onClose={onCharterClose} size="xl">
        <ModalOverlay />
        <ModalContent maxH="80vh">
          <ModalHeader>Charte de la Communaut√© RMR</ModalHeader>
          <ModalCloseButton />
          <ModalBody overflow="auto">
            <VStack spacing={4} align="start">
              <Box>
                <Heading size="md" mb={2}>1. Participation aux Formations</Heading>
                <Text fontSize="sm" color="gray.600">
                  ‚Ä¢ Horaire : Tous les soirs √† 21h30 (GMT+3)<br/>
                  ‚Ä¢ Tol√©rance : 4 absences maximum sur 6 sessions<br/>
                  ‚Ä¢ Signalement obligatoire des absences
                </Text>
              </Box>
              
              <Box>
                <Heading size="md" mb={2}>2. Respect et Comportement</Heading>
                <Text fontSize="sm" color="gray.600">
                  ‚Ä¢ Aucune insulte, provocation ou menace tol√©r√©e<br/>
                  ‚Ä¢ Bienveillance et entraide privil√©gi√©es<br/>
                  ‚Ä¢ Confidentialit√© des informations partag√©es
                </Text>
              </Box>
              
              <Box>
                <Heading size="md" mb={2}>3. Responsabilit√©</Heading>
                <Text fontSize="sm" color="gray.600">
                  ‚Ä¢ Vous √™tes responsable de toutes vos d√©cisions d'investissement<br/>
                  ‚Ä¢ Aucune garantie de r√©sultat financier<br/>
                  ‚Ä¢ Application volontaire des enseignements re√ßus
                </Text>
              </Box>

              <Box>
                <Heading size="md" mb={2}>4. Sanctions</Heading>
                <Text fontSize="sm" color="gray.600">
                  ‚Ä¢ Avertissement pour manquements mineurs<br/>
                  ‚Ä¢ Suspension temporaire pour r√©cidive<br/>
                  ‚Ä¢ Exclusion d√©finitive pour manquements graves
                </Text>
              </Box>

              <Box bg="yellow.50" p={4} borderRadius="md">
                <Text fontSize="sm" fontWeight="bold" color="orange.800">
                  ‚ö†Ô∏è Important : En acceptant cette charte, vous vous engagez √† respecter 
                  toutes ces r√®gles. Le non-respect peut entra√Æner votre exclusion de la communaut√©.
                </Text>
              </Box>

              <Divider />

              <Box>
                <Heading size="md" mb={2}>5. Formations et √âducation</Heading>
                <Text fontSize="sm" color="gray.600" mb={3}>
                  Notre communaut√© propose des formations r√©guli√®res sur :
                </Text>
                <VStack spacing={1} align="start" fontSize="sm" color="gray.600">
                  <Text>‚Ä¢ Fondamentaux des cryptomonnaies</Text>
                  <Text>‚Ä¢ Analyse technique et fondamentale</Text>
                  <Text>‚Ä¢ Identification et pr√©vention des arnaques</Text>
                  <Text>‚Ä¢ S√©curisation des wallets et cl√©s priv√©es</Text>
                  <Text>‚Ä¢ Strat√©gies de gestion des risques</Text>
                  <Text>‚Ä¢ Utilisation s√©curis√©e de la plateforme de r√©compense CryptocaVault</Text>
                </VStack>
              </Box>

              <Box>
                <Heading size="md" mb={2}>6. Communication et Support</Heading>
                <Text fontSize="sm" color="gray.600">
                  ‚Ä¢ Canaux officiels : WhatsApp, Telegram, Discord<br/>
                  ‚Ä¢ Support prioritaire pour les membres actifs<br/>
                  ‚Ä¢ Partage d'exp√©riences encourag√©<br/>
                  ‚Ä¢ Questions bienvenues pendant les sessions
                </Text>
              </Box>

              <Box bg="blue.50" p={4} borderRadius="md">
                <Text fontSize="sm" fontWeight="bold" color="blue.800" mb={2}>
                  üìö Objectif de la Communaut√©
                </Text>
                <Text fontSize="sm" color="blue.700">
                  Notre mission est de vous √©duquer et vous accompagner pour que vous puissiez 
                  prendre des d√©cisions √©clair√©es en toute s√©curit√© dans l'univers des cryptomonnaies.
                </Text>
              </Box>

              <Box bg="orange.50" p={4} borderRadius="md">
                <Text fontSize="sm" fontWeight="bold" color="orange.800" mb={2}>
                  ‚ö†Ô∏è Avertissement Final
                </Text>
                <Text fontSize="sm" color="orange.700">
                  Les cryptomonnaies sont hautement volatiles et comportent des risques significatifs. 
                  N'investissez jamais plus que ce que vous pouvez vous permettre de perdre. 
                  Cette communaut√© fournit de l'√©ducation, pas des conseils d'investissement.
                </Text>
              </Box>
            </VStack>
          </ModalBody>
          <ModalFooter>
            <VStack spacing={3} w="full">
              <Button colorScheme="blue" onClick={onCharterClose} w="full">
                J'ai lu et compris la charte
              </Button>
              <Text fontSize="xs" color="gray.500" textAlign="center">
                La charte compl√®te est √©galement disponible sur notre site web
              </Text>
            </VStack>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default CommunityRegistrationPage;