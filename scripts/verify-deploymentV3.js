// scripts/verify-deploymentNFTV3.js
const { ethers } = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("üîç V√©rification du d√©ploiement CryptocaVault NFTV3...\n");

  // Lecture des informations de d√©ploiement
  const network = await ethers.provider.getNetwork();
  const deploymentFile = path.join(__dirname, '..', 'deployments', `${network.name}-${network.chainId}.json`);
  
  if (!fs.existsSync(deploymentFile)) {
    throw new Error("‚ùå Fichier de d√©ploiement non trouv√©. D√©ployez d'abord le contrat.");
  }

  const deploymentInfo = JSON.parse(fs.readFileSync(deploymentFile, 'utf8'));
  const contractAddress = deploymentInfo.contractAddress;

  console.log("üìÑ Informations de d√©ploiement:");
  console.log("   - R√©seau:", deploymentInfo.network);
  console.log("   - Adresse contrat:", contractAddress);
  console.log("   - Treasury:", deploymentInfo.treasuryWallet);
  console.log("   - D√©ploy√© le:", deploymentInfo.timestamp);

  // Se connecter au contrat d√©ploy√©
  const CryptocaVaultNFTV3 = await ethers.getContractFactory("CryptocaVaultNFTV3");
  const contract = CryptocaVaultNFTV3.attach(contractAddress);

  console.log("\nüß™ Tests de fonctionnalit√©...");

  try {
    // Test 1: V√©rifier les informations du treasury
    console.log("1Ô∏è‚É£ V√©rification du treasury...");
    const treasuryInfo = await contract.getTreasuryInfo();
    
    const expectedTreasury = "0xe0B7BCb42aeBB5Be565cc81518a48D780f3c001c";
    if (treasuryInfo.primaryTreasury.toLowerCase() === expectedTreasury.toLowerCase()) {
      console.log("   ‚úÖ Treasury correctement configur√©");
    } else {
      console.log("   ‚ùå Treasury incorrect:");
      console.log("      Attendu:", expectedTreasury);
      console.log("      Trouv√©:", treasuryInfo.primaryTreasury);
    }

    // Test 2: V√©rifier les tiers NFT
    console.log("2Ô∏è‚É£ V√©rification des tiers NFT...");
    const activeTiers = await contract.getAllActiveTiers();
    console.log("   Tiers actifs:", activeTiers.map(t => t.toString()));

    for (let i = 0; i < Math.min(activeTiers.length, 4); i++) {
      const tierId = activeTiers[i];
      const tierInfo = await contract.getTierInfo(tierId);
      
      console.log(`   Tier ${tierId}:`);
      console.log(`      - Nom: ${tierInfo.name}`);
      console.log(`      - Prix: ${ethers.utils.formatEther(tierInfo.price)} USDC`);
      console.log(`      - Supply: ${tierInfo.minted}/${tierInfo.supply}`);
      console.log(`      - Multiplicateur: ${tierInfo.multiplier/100}x`);
      console.log(`      - Actif: ${tierInfo.active ? 'Oui' : 'Non'}`);
    }

    // Test 3: V√©rifier les statistiques de revenus
    console.log("3Ô∏è‚É£ V√©rification des revenus...");
    const revenueStats = await contract.getRevenueStats();
    console.log("   Total des revenus:", ethers.utils.formatEther(revenueStats.totalRev), "USDC");
    
    if (revenueStats.tierIds.length > 0) {
      console.log("   Revenus par tier:");
      for (let i = 0; i < revenueStats.tierIds.length; i++) {
        const tierId = revenueStats.tierIds[i];
        const revenue = revenueStats.tierRevenues[i];
        console.log(`      Tier ${tierId}: ${ethers.utils.formatEther(revenue)} USDC`);
      }
    } else {
      console.log("   Aucun revenu encore g√©n√©r√©");
    }

    // Test 4: V√©rifier les constantes
    console.log("4Ô∏è‚É£ V√©rification des constantes...");
    const treasuryConstant = await contract.TREASURY_WALLET();
    console.log("   TREASURY_WALLET constant:", treasuryConstant);
    
    // Test 5: Simulation d'un achat (sans l'ex√©cuter)
    console.log("5Ô∏è‚É£ Test de simulation d'achat...");
    try {
      // Cr√©er un wallet fictif pour le test
      const [deployer] = await ethers.getSigners();
      
      // Test avec le tier 1 (Bronze)
      const tier1Info = await contract.getTierInfo(1);
      console.log("   Simulation achat NFT Bronze:");
      console.log("      - Prix requis:", ethers.utils.formatEther(tier1Info.price), "USDC");
      console.log("      - Supply restant:", tier1Info.supply - tier1Info.minted);
      
      // V√©rifier si l'utilisateur peut th√©oriquement acheter
      const hasNFT = await contract.ownerHasTier(deployer.address, 1);
      console.log("      - D√©ployeur poss√®de d√©j√† ce tier:", hasNFT ? "Oui" : "Non");
      
    } catch (error) {
      console.log("   ‚ö†Ô∏è Simulation partielle:", error.message);
    }

    // Test 6: V√©rifier les permissions admin
    console.log("6Ô∏è‚É£ V√©rification des permissions...");
    try {
      const owner = await contract.owner();
      const [deployer] = await ethers.getSigners();
      
      if (owner.toLowerCase() === deployer.address.toLowerCase()) {
        console.log("   ‚úÖ Permissions admin correctes");
      } else {
        console.log("   ‚ö†Ô∏è Owner diff√©rent du d√©ployeur:");
        console.log("      Owner:", owner);
        console.log("      D√©ployeur:", deployer.address);
      }
    } catch (error) {
      console.log("   ‚ùå Erreur v√©rification owner:", error.message);
    }

    console.log("\nüìä R√©sum√© de la v√©rification:");
    console.log("‚úÖ Contrat d√©ploy√© et op√©rationnel");
    console.log("‚úÖ Treasury configur√© correctement");
    console.log("‚úÖ Tiers NFT initialis√©s");
    console.log("‚úÖ Fonctions de base accessibles");
    
    console.log("\nüîó Liens utiles:");
    console.log("   - Contrat sur BSCScan:", `https://bscscan.com/address/${contractAddress}`);
    console.log("   - Treasury sur BSCScan:", `https://bscscan.com/address/${expectedTreasury}`);
    console.log("   - USDC Treasury:", `https://bscscan.com/token/0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d?a=${expectedTreasury}`);

    console.log("\nüìã Actions recommand√©es:");
    console.log("1. V√©rifier le contrat sur BSCScan:");
    console.log(`   npx hardhat verify --network ${network.name === 'unknown' ? 'bsc' : network.name} ${contractAddress} "${deploymentInfo.usdcToken}"`);
    console.log("2. Mettre √† jour l'adresse dans le frontend");
    console.log("3. Tester un achat avec un petit montant");
    console.log("4. Configurer les m√©tadonn√©es NFT");

  } catch (error) {
    console.log("‚ùå Erreur lors de la v√©rification:", error.message);
    throw error;
  }
}

// Fonction pour tester la connexion r√©seau
async function testNetworkConnection() {
  try {
    const network = await ethers.provider.getNetwork();
    const blockNumber = await ethers.provider.getBlockNumber();
    
    console.log("üåê Connexion r√©seau:");
    console.log("   - R√©seau:", network.name);
    console.log("   - Chain ID:", network.chainId);
    console.log("   - Dernier bloc:", blockNumber);
    
    return true;
  } catch (error) {
    console.log("‚ùå Erreur de connexion r√©seau:", error.message);
    return false;
  }
}

// Ex√©cution
async function runVerification() {
  console.log("üöÄ D√©but de la v√©rification...\n");
  
  // Tester la connexion r√©seau d'abord
  const networkOk = await testNetworkConnection();
  if (!networkOk) {
    throw new Error("Impossible de se connecter au r√©seau");
  }
  
  await main();
}

runVerification()
  .then(() => {
    console.log("\n‚úÖ V√©rification termin√©e avec succ√®s !");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Erreur lors de la v√©rification:");
    console.error(error);
    process.exit(1);
  });